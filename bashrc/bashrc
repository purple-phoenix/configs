# .bashrc
DISTRO="Ubuntu"
# Debug uncomment line below. Shows every command as output and aborts on error
#set -xe
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
get_battery () {
        battery_name=`upower -e | grep 'BAT'`
        battery_level=`upower -i $battery_name | grep %`
        echo $battery_level
}
vpn_cmd_1="/usr/bin/python3 $HOME/github/gp-saml-gui/gp_saml_gui.py --no-verify --clientos=Windows"
open_connect_cmd="sudo openconnect --protocol=gp -u $USER --os=win"
open_connect_cmd+=" --passwd-on-stdin"
open_connect_cmd+=" --csd-wrapper=/usr/libexec/openconnect/hipreport.sh"

connect_slab () {
        vpn_cmd="${vpn_cmd_1} ${1} -q"
        eval $($vpn_cmd)  && echo "$COOKIE" | $($open_connect_cmd $HOST)
      }
connect_slab_bos () {
        connect_slab bos-vpn.silabs.com
      }
connect_slab_aus () {
        connect_slab globalprotect.silabs.com
      }
connect_slab_bud () {
        connect_slab bud-vpn.silabs.com
      }

connect_evolv () {
  eval "sudo openconnect --protocol=gp -u $USER --os=win 50.225.251.145" 
}

mount_share () {
  mount_cmd="sudo mount -t cifs -o uid=1000 -o gid=1000 -o username=mmccarthy //evolv-fp01/${1} /mnt/${1}"
  eval $mount_cmd
     }

 git_config_evolv () {
   eval "git config user.email 'mmccarthy@evolvtechnology.com'"
   eval "git config user.name 'Matt McCarthy'"

   }
if ! [[ "$PATH" =~ "$HOME/.cargo/bin/:$HOME/.cabal/bin:" ]]
then
     PATH="$HOME/.cargo/bin/:$HOME/.cabal/bin/:$PATH"
fi
export PATH

export WORKSPACE=$HOME/git
alias idea=$HOME/Downloads/ideaIC-2020.2.2/idea-IC-202.7319.50/bin/idea.sh

alias musfs="sudo mount /mnt/usfs01/Shared"
alias srcb="source $HOME/.bashrc"
alias ytmusic="npm start --prefix $HOME/github/ytmdesktop"
alias commshubup="$HOME/git/services/startup_scripts/start_commshub.sh"
alias dni="sudo dnf install"
alias vim="nvim"
alias vi="nvim"
alias GIT="cd $HOME/git"
alias GITHUB="cd $HOME/github"
alias BASHRC="cd $HOME/github/configs/bashrc"

export SYNOPSIS="/mnt/Shared/R\&D/SQA/synopsis/master/synopsis.py"
export EXPRESSTEST="/mnt/data1/express/ExpressTestRecords"

### ARCHIVE EXTRACTION
# usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;      
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


# navigation
alias ..='cd ..' 
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'



# Push GHC on path
GHC_PATH=`stack path | grep compiler-bin | sed -e 's/compiler-bin: //'`
export PATH="$PATH:$GHC_PATH"

PYTHON_VERSION=3.8

# Activate conda https://askubuntu.com/questions/849470/how-do-i-activate-a-conda-environment-in-my-bashrc
. $HOME/anaconda3/etc/profile.d/conda.sh
conda activate
# Shell Bling
if [[ "$DISTRO" == "Fedora" ]]; then
  if [ -f `which powerline-daemon` ]; then
    powerline-daemon -q || true
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    . /usr/share/powerline/bash/powerline.sh
  fi
fi

if [[ "$DISTRO" == "Ubuntu" ]]; then
  # Might need to uninstall apt python3-powerline
  # But install apt powerline
  ubuntu_powerline_sh=$HOME/.local/lib/python3.8/site-packages/powerline
  ubuntu_powerline_sh+=/bindings/bash/powerline.sh
  if [ -f $ubuntu_powerline_sh ]; then
    $HOME/.local/bin/powerline-daemon -q || true
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    source $ubuntu_powerline_sh
  fi
fi

export SSLKEYLOGFILE=$HOME/ssl-key.log

# Map caps lock to escape for vim
xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    #. /etc/bash_completion
#fi

# GHCUP removed for now
#[ -f "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env" ]  \
# && source "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env"

if [[ -n $VIRTUAL_ENV ]]; then
  echo "Sourcing"
  #source "${VIRTUAL_ENV}/bin/activate"
fi

#$HOME/.screenlayout/two_screen.sh

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

ALACRITTY_PATH=$HOME/github/alacritty/target/release/
if test -f "$ALACRITTY_PATH/alacritty"; then
  export PATH="$PATH:$ALACRITTY_PATH"
fi

source $HOME/github/alacritty/extra/completions/alacritty.bash

test -f ~/.git-completion.bash && . $_
